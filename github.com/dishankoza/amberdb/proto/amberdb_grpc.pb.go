// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/amberdb.proto

package amberdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AmberService_BeginTransaction_FullMethodName = "/amberdb.AmberService/BeginTransaction"
	AmberService_Write_FullMethodName            = "/amberdb.AmberService/Write"
	AmberService_Read_FullMethodName             = "/amberdb.AmberService/Read"
	AmberService_Commit_FullMethodName           = "/amberdb.AmberService/Commit"
	AmberService_Abort_FullMethodName            = "/amberdb.AmberService/Abort"
)

// AmberServiceClient is the client API for AmberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmberServiceClient interface {
	BeginTransaction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TxnID, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*Status, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Commit(ctx context.Context, in *TxnID, opts ...grpc.CallOption) (*Status, error)
	Abort(ctx context.Context, in *TxnID, opts ...grpc.CallOption) (*Status, error)
}

type amberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAmberServiceClient(cc grpc.ClientConnInterface) AmberServiceClient {
	return &amberServiceClient{cc}
}

func (c *amberServiceClient) BeginTransaction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TxnID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxnID)
	err := c.cc.Invoke(ctx, AmberService_BeginTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amberServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, AmberService_Write_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amberServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, AmberService_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amberServiceClient) Commit(ctx context.Context, in *TxnID, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, AmberService_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amberServiceClient) Abort(ctx context.Context, in *TxnID, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, AmberService_Abort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmberServiceServer is the server API for AmberService service.
// All implementations must embed UnimplementedAmberServiceServer
// for forward compatibility.
type AmberServiceServer interface {
	BeginTransaction(context.Context, *Empty) (*TxnID, error)
	Write(context.Context, *WriteRequest) (*Status, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Commit(context.Context, *TxnID) (*Status, error)
	Abort(context.Context, *TxnID) (*Status, error)
	mustEmbedUnimplementedAmberServiceServer()
}

// UnimplementedAmberServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAmberServiceServer struct{}

func (UnimplementedAmberServiceServer) BeginTransaction(context.Context, *Empty) (*TxnID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedAmberServiceServer) Write(context.Context, *WriteRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedAmberServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedAmberServiceServer) Commit(context.Context, *TxnID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedAmberServiceServer) Abort(context.Context, *TxnID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedAmberServiceServer) mustEmbedUnimplementedAmberServiceServer() {}
func (UnimplementedAmberServiceServer) testEmbeddedByValue()                      {}

// UnsafeAmberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmberServiceServer will
// result in compilation errors.
type UnsafeAmberServiceServer interface {
	mustEmbedUnimplementedAmberServiceServer()
}

func RegisterAmberServiceServer(s grpc.ServiceRegistrar, srv AmberServiceServer) {
	// If the following call pancis, it indicates UnimplementedAmberServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AmberService_ServiceDesc, srv)
}

func _AmberService_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmberServiceServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmberService_BeginTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmberServiceServer).BeginTransaction(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmberService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmberServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmberService_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmberServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmberService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmberServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmberService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmberServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmberService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmberServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmberService_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmberServiceServer).Commit(ctx, req.(*TxnID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmberService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmberServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmberService_Abort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmberServiceServer).Abort(ctx, req.(*TxnID))
	}
	return interceptor(ctx, in, info, handler)
}

// AmberService_ServiceDesc is the grpc.ServiceDesc for AmberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AmberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "amberdb.AmberService",
	HandlerType: (*AmberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginTransaction",
			Handler:    _AmberService_BeginTransaction_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _AmberService_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AmberService_Read_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _AmberService_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _AmberService_Abort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/amberdb.proto",
}
